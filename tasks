#!/bin/bash

set -Eeo pipefail

###########################
# Local Config Parameters #
###########################

AWS_DEFAULT_REGION=eu-west-2
IMAGE_REPO_NAME=deductions/gp2gp-message-handler
export NHS_SERVICE=gp2gp-message-handler

####################################
# Instance (Environment) Variables #
####################################

function check_env {
  if [[ -z "${NHS_ENVIRONMENT}" ]]; then
    echo "Must set NHS_ENVIRONMENT"
    exit 1
  fi
}

function get_latest_commit_hash {
  export COMMIT_HASH=$(git rev-parse HEAD | cut -c 1-8)
}

function get_aws_account_id {
    AWS_ACCOUNT_ID=$(dojo -c Dojofile-infra "aws sts get-caller-identity | jq -r .Account")
}

function configure_local_envs {
  export GP2GP_WORKER_MHS_QUEUE_URL_1=tcp://mq-1:61616
  export GP2GP_WORKER_MHS_QUEUE_URL_2=tcp://mq-2:61616
  export GP2GP_WORKER_MHS_QUEUE_USERNAME=admin
  export GP2GP_WORKER_MHS_QUEUE_PASSWORD=admin
}

#######################
# Terraform Functions #
#######################

function tf_plan {
  operation=$1
  cd terraform

  COMMIT_HASH=$(git rev-parse HEAD | cut -c 1-8)

  if [[ -z "${GO_DEPENDENCY_LABEL_APP}" ]]; then
    IMAGE_TAG=${COMMIT_HASH}
  else
    IMAGE_TAG=${GO_DEPENDENCY_LABEL_APP}
  fi

  terraform init -reconfigure -backend-config key=${NHS_SERVICE}-${NHS_ENVIRONMENT}/terraform.tfstate
  terraform get # modules
  if [[ "${operation}" == "create" ]]; then
    terraform plan -var task_image_tag=$IMAGE_TAG -var-file=$NHS_ENVIRONMENT.tfvars -out="nhs_deployment.tfplan"
  elif [[ "${operation}" == "destroy" ]]; then
    terraform plan -var task_image_tag=$IMAGE_TAG -var-file=$NHS_ENVIRONMENT.tfvars -out="nhs_deployment.tfplan" -destroy
  else
    echo "Unknown operation (should be create or destroy), got: ${operation}"
    exit 1
  fi
}

function tf_apply {
  cd terraform
  terraform init -backend-config key=${NHS_SERVICE}-${NHS_ENVIRONMENT}/terraform.tfstate
  terraform get # modules
  terraform apply nhs_deployment.tfplan
  terraform output -json > tf-out.json
}

############################
# Docker Related Functions #
############################

function docker_login {
  echo Logging in to Amazon ECR...
  eval $(dojo -c Dojofile-infra "aws ecr get-login --no-include-email --region $AWS_DEFAULT_REGION")
}

function configure_docker_repository_uri {
  docker_login
  get_aws_account_id
  export REPOSITORY_URI=$AWS_ACCOUNT_ID.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/$IMAGE_REPO_NAME
}

function build_docker_image {
  echo Build started on `date`
  get_latest_commit_hash
  IMAGE_TAG=${COMMIT_HASH}
  echo Building the Docker image...
  docker build -t $REPOSITORY_URI:latest -t $REPOSITORY_URI:$IMAGE_TAG .
  echo Build completed on `date`
}

###########
## TASKS ##
###########

command="$1"
case "${command}" in
  build_docker)
      configure_local_envs
      dojo -c Dojofile-itest "./tasks _build"
      configure_docker_repository_uri
      build_docker_image
      echo "Pushing the Docker image... $REPOSITORY_URI:latest $REPOSITORY_URI:$IMAGE_TAG"
      docker push $REPOSITORY_URI:$IMAGE_TAG
      docker push $REPOSITORY_URI:latest
      ;;
  _build)
      rm -rf build/
      gradle build
      ;;
  build)
      dojo "./tasks _build"
      ;;
  _test_integration)
      gradle test --tests '*IntegrationTests'
      ;;
  test_integration)
      configure_local_envs
      dojo -c Dojofile-itest "./tasks _test_integration"
      ;;
  _test_unit)
      gradle test
      ;;
  test_unit)
      dojo "./tasks _test_unit"
      ;;
  _test_coverage)
      gradle jacocoTestCoverageVerification
      ;;
  test_coverage)
      configure_local_envs
      dojo -c Dojofile-itest "./tasks _test_coverage"
      ;;
  _code_quality)
      gradle check
      ;;
  code_quality)
      configure_local_envs
      dojo -c Dojofile-itest "./tasks _code_quality"
      ;;
  _dep)
      gradle dependencyCheckAnalyze
      ;;
  dep)
      dojo "./tasks _dep"
      ;;
  tf)
      check_env
      dojo -c Dojofile-infra "bash"
      ;;
  _tf_plan)
      tf_plan "$2"
      ;;
  tf_plan)
      check_env
      dojo -c Dojofile-infra "./tasks _tf_plan $2"
      ;;
  _tf_apply)
      tf_apply
      ;;
  tf_apply)
      check_env
      dojo -c Dojofile-infra "./tasks _tf_apply"
      ;;
  _wait_ecs)
      aws ecs wait services-stable \
        --region $AWS_DEFAULT_REGION \
        --cluster $NHS_ENVIRONMENT-deductions-private-ecs-cluster \
        --service $NHS_ENVIRONMENT-${NHS_SERVICE}-service
      ;;
  wait_ecs)
      check_env
      dojo -c Dojofile-infra "./tasks _wait_ecs"
      ;;
  *)
      echo "Invalid command: '${command}'"
      exit 1
      ;;
esac
set +e
